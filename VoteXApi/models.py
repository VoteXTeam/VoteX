# reference from labs1-4
from datetime import timedelta, datetime
from enum import Enum

from django.contrib.auth.models import AbstractUser, Group, Permission
from django.db import models
from django.dispatch import receiver
from multiselectfield import MultiSelectField
from rest_framework.authtoken.models import Token
from django.utils.translation import gettext_lazy as _

REGION_CHOICES = (
    ('vinnytsia', _('Vinnytsia')),
    ('volyn', _('Volyn')),
    ('dnipropetrovsk', _('Dnipropetrovsk')),
    ('donetsk', _('Donetsk')),
    ('zhytomyr', _('Zhytomyr')),
    ('zakarpattia', _('Zakarpattia')),
    ('zaporizhzhia', _('Zaporizhzhia')),
    ('ivano-frankivsk', _('Ivano-Frankivsk')),
    ('kyiv', _('Kyiv')),
    ('kirovohrad', _('Kirovohrad')),
    ('luhansk', _('Luhansk')),
    ('lviv', _('Lviv')),
    ('mykolaiv', _('Mykolaiv')),
    ('odesa', _('Odesa')),
    ('poltava', _('Poltava')),
    ('rivne', _('Rivne')),
    ('sumy', _('Sumy')),
    ('ternopil', _('Ternopil')),
    ('kharkiv', _('Kharkiv')),
    ('kherson', _('Kherson')),
    ('khmelnytskyi', _('Khmelnytskyi')),
    ('cherkasy', _('Cherkasy')),
    ('chernivtsi', _('Chernivtsi')),
    ('chernihiv', _('Chernihiv')),
)

ORGANIZATION_CHOICES = (
    ('softserve', _('SoftServe')),
    ('google', _('Google')),
    ('bing', _('Bing')),
)
#
#
# # Create your models here.
# General model for any user
class CustomUser(AbstractUser):
    # password, email, date_joined and name generated by AbstractUser class
    # email = models.CharField(max_length=45, unique=True)
    # name = models.CharField(max_length=120, unique=True, null=True)
    # password = models.CharField(max_length=45)
    # register_date = models.DateTimeField(auto_now_add=True)
    username = models.CharField(max_length=50, unique=True)
    region = models.CharField(
        max_length=45,
        choices=REGION_CHOICES,
        null=True
    )
    organization = models.CharField(
        max_length=45,
        choices=ORGANIZATION_CHOICES,
        null=True
    )

    groups = models.ManyToManyField(
        Group,
        verbose_name='groups',
        blank=True,
        related_name='related_groups'  # Add a unique related_name for groups
    )

    user_permissions = models.ManyToManyField(
        Permission,
        verbose_name='user permissions',
        blank=True,
        related_name='related_permissions'  # Add a unique related_name for user_permissions
    )

    class Meta:
        permissions = (
            ('election_admin', 'Can Edit, Remove, and Add Elections'),
        )

    EMAIL_FIELD = "email"
    USERNAME_FIELD = 'username'
    REQUIRED_FIELDS = ['region', 'role']

    def __str__(self):
        return self.email


# A reviever that would automatically generate a token when a user is created
@receiver(models.signals.post_save, sender=CustomUser)
def create_user_token(sender, instance=None, created=False, **kwargs):
    if created:
        Token.objects.create(user=instance)


class Election(models.Model):
    name = models.CharField(max_length=120)
    votes_per_voter = models.IntegerField()
    retractable_votes = models.BooleanField(default=False)
    anonymous = models.BooleanField(default=True)
    start_of_voting = models.DateTimeField(auto_now_add=True)
    end_of_voting = models.DateTimeField(default=datetime.now() + timedelta(days=1))
    organizations = models.CharField(
        max_length=45,
        choices=ORGANIZATION_CHOICES,
    )
    regions = MultiSelectField(
        max_length=45,
        choices=REGION_CHOICES,
    )

    def __str__(self):
        return self.name


class Candidate(models.Model):
    election = models.ForeignKey(Election, on_delete=models.CASCADE)
    name = models.CharField(max_length=120)
    number_of_votes = models.IntegerField()

    def __str__(self):
        return self.name

# How to get>
# election = Election.objects.get(id=election_id)
# candidates = Candidate.objects.filter(election=election)

# class Pax(models.Model):
#     user = models.OneToOneField("User", on_delete=models.CASCADE)
#     name = models.CharField(max_length=45)
#     phone_number = models.CharField(max_length=45)
#     card_info = models.CharField(max_length=45)
#
#     def __str__(self):
#         return self.name
#
#
# class Driver(models.Model):
#     user = models.OneToOneField("User", on_delete=models.CASCADE)
#     name = models.CharField(max_length=45)
#     car_name = models.CharField(max_length=45)
#     rating = models.FloatField()
#     phone_number = models.CharField(max_length=45)
#     card_info = models.CharField(max_length=45)
#
#     def __str__(self):
#         return self.name
#
#
# class Ride(models.Model):
#     pax = models.ForeignKey("Pax", on_delete=models.CASCADE)
#     driver = models.ForeignKey("Driver", on_delete=models.CASCADE)
#     start_gps = models.CharField(max_length=45, default=0)
#     end_gps = models.CharField(max_length=45, default=0)
#     payment_method = models.CharField(max_length=45)
#     stars = models.IntegerField(default=0)
#
#     def __str__(self):
#         return self.driver.name
# # python manage.py makemigrations
# # python manage.py migrate
